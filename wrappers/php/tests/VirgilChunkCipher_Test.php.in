<?php
/**
 * Copyright (C) 2015 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

include_once "@PHP_MODULE_FILE_NAME@";
include_once "StringSource.php";
include_once "StringSink.php";

/**
 * @coversDefaultClass VirgilChunkCipher
 */
class VirgilChunkCipher_Test extends PHPUnit_Framework_TestCase {

    /**
     * @covers VirgilChunkCipher::addKeyRecipient
     * @covers VirgilChunkCipher::startEncryption
     * @covers VirgilChunkCipher::process
     */
    public function test_encryption() {
        $initialText = "This is very long string will be encoded. And some more.";
        $recipientId = "842602ff-9713-4184-8176-f54ac7efe14e";
        $publicKeyPem512 =
                "-----BEGIN PUBLIC KEY-----\n".
                "MIGbMBQGByqGSM49AgEGCSskAwMCCAEBDQOBggAEA8GVpzCcTiISVsHjuMZg4gvS\n".
                "nIT5ubLZ6TZ8LRzPjYah5h71TrHOgJVXkPtzpFbHdWdvcSsAMbLCnvEnTlXFMDn5\n".
                "3a3YhN+cTdWZCgleKQCc2keY/alCRdgtjL3po90DuT8WcxSreTlVGkE/TZvCZEes\n".
                "o+yIBPaohqMzfjvj4Yw=\n".
                "-----END PUBLIC KEY-----\n";
        $password = "password-recipient";
        // Create cipher
        $cipher = new VirgilChunkCipher();
        // Add recipients
        $cipher->addKeyRecipient($recipientId, $publicKeyPem512);
        $cipher->addPasswordRecipient($password);
        // Init encryption.
        $preferredChunkSize = 7;
        $actualChunkSize = $cipher->startEncryption($preferredChunkSize);
        // Split string to chunks.
        $chunks = str_split($initialText, $actualChunkSize);
        // Encode.
        $encryptedData = "";
        foreach ($chunks as $chunk) {
            $encryptedData .= $cipher->process($chunk);
        }
        // Finalize encryption to avoid security issues.
        $cipher->finish();
        // Store content info.
        $contentInfo = $cipher->getContentInfo();

        return array($contentInfo, $encryptedData, $initialText);
    }

    /**
     * @covers VirgilChunkCipher::addKeyRecipient
     * @covers VirgilChunkCipher::startDecryptionWithKey
     * @covers VirgilChunkCipher::process
     * @depends test_encryption
     */
    public function test_decryption_with_key(array $encryptionDatagram) {
        $recipientId = "842602ff-9713-4184-8176-f54ac7efe14e";
        $privateKeyPem512 =
                "-----BEGIN EC PRIVATE KEY-----\n".
                "MIHaAgEBBEBbGZvQqVS+z9QGVlef12ogHS+cGjICfR8oyhBySZTadhRqGmgkWNiS\n".
                "b+IcSjzaw8xEZuIkT/wG/yVlx4Zimk0XoAsGCSskAwMCCAEBDaGBhQOBggAEA8GV\n".
                "pzCcTiISVsHjuMZg4gvSnIT5ubLZ6TZ8LRzPjYah5h71TrHOgJVXkPtzpFbHdWdv\n".
                "cSsAMbLCnvEnTlXFMDn53a3YhN+cTdWZCgleKQCc2keY/alCRdgtjL3po90DuT8W\n".
                "cxSreTlVGkE/TZvCZEeso+yIBPaohqMzfjvj4Yw=\n".
                "-----END EC PRIVATE KEY-----\n";

        // Get public parameters
        $contentInfo = $encryptionDatagram[0];
        $encryptedData = $encryptionDatagram[1];
        $initialText = $encryptionDatagram[2];
        // Create cipher
        $cipher = new VirgilChunkCipher();
        // Set content info
        $cipher->setContentInfo($contentInfo);
        // Init decryption.
        $actualChunkSize = $cipher->startDecryptionWithKey($recipientId, $privateKeyPem512);
        // Split string to chunks.
        $chunks = str_split($encryptedData, $actualChunkSize);
        // Decode.
        $plainText = "";
        foreach ($chunks as $chunk) {
            $plainText .= $cipher->process($chunk);
        }
        // Finalize decryption to avoid security issues.
        $cipher->finish();
        // Validate results
        $this->assertEquals($initialText, $plainText);
    }

    /**
     * @covers VirgilChunkCipher::addKeyRecipient
     * @covers VirgilChunkCipher::startDecryptionWithPassword
     * @covers VirgilChunkCipher::process
     * @depends test_encryption
     */
    public function test_decryption_with_password(array $encryptionDatagram) {
        $password = "password-recipient";
        // Get public parameters
        $contentInfo = $encryptionDatagram[0];
        $encryptedData = $encryptionDatagram[1];
        $initialText = $encryptionDatagram[2];
        // Create cipher
        $cipher = new VirgilChunkCipher();
        // Set content info
        $cipher->setContentInfo($contentInfo);
        // Init decryption.
        $actualChunkSize = $cipher->startDecryptionWithPassword($password);
        // Split string to chunks.
        $chunks = str_split($encryptedData, $actualChunkSize);
        // Decode.
        $plainText = "";
        foreach ($chunks as $chunk) {
            $plainText .= $cipher->process($chunk);
        }
        // Finalize decryption to avoid security issues.
        $cipher->finish();
        // Validate results
        $this->assertEquals($initialText, $plainText);
    }
}

?>
