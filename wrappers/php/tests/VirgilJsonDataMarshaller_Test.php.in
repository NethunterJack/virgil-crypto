<?php

include_once "@PHP_MODULE_FILE_NAME@";

/**
 * @covers VirgilJsonDataMarshaller algorithms
 */
class VirgilJsonDataMarshaller_Test extends PHPUnit_Framework_TestCase {

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_account_marshalling() {
        $accountId = "USER-1234";
        $accountJsonExpected = file_get_contents("data/json_account.json");

        $account = new VirgilAccount();
        $account->id()->setAccountId($accountId);

        $marshaler = new VirgilJsonDataMarshaller();
        $accountJson = $marshaler->marshal($account);

        $this->assertEquals($accountJsonExpected, $accountJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalAccount
     */
    public function test_account_demarshalling() {
        $accountIdExpected = "USER-1234";
        $accountJson = file_get_contents("data/json_account.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $account = $marshaler->demarshalAccount($accountJson);

        $this->assertEquals($accountIdExpected, $account->id()->accountId());
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_certificate_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $publicKey = file_get_contents("data/certificate_public_key.pem");
        $certfifcateJsonExpected = file_get_contents("data/json_certificate.json");

        $certificate = new VirgilCertificate($publicKey);
        $certificate->id()->setAccountId($accountId);
        $certificate->id()->setCertificateId($certificateId);

        $marshaler = new VirgilJsonDataMarshaller();
        $certificateJson = $marshaler->marshal($certificate);

        $this->assertEquals($certfifcateJsonExpected, $certificateJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalCertificate
     */
    public function test_certificate_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedPublicKey = file_get_contents("data/certificate_public_key.pem");
        $certificateJson = file_get_contents("data/json_certificate.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $certificate = $marshaler->demarshalCertificate($certificateJson);

        $this->assertEquals($expectedAccountId, $certificate->id()->accountId());
        $this->assertEquals($expectedCertificateId, $certificate->id()->certificateId());
        $this->assertEquals($expectedPublicKey, $certificate->publicKey());
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_email_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "user@domain.com";
        $ticketUserIdType = VirgilUserIdType::email();
        $ticketJsonExpected = file_get_contents("data/json_user_id_email_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_phone_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "+1 777 666 3333";
        $ticketUserIdType = VirgilUserIdType::phone();
        $ticketJsonExpected = file_get_contents("data/json_user_id_phone_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_domain_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "virgilsecurity.com";
        $ticketUserIdType = VirgilUserIdType::domain();
        $ticketJsonExpected = file_get_contents("data/json_user_id_domain_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_mac_address_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "AA:BB:CC:DD:EE:FF";
        $ticketUserIdType = VirgilUserIdType::macAddress();
        $ticketJsonExpected = file_get_contents("data/json_user_id_mac_address_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_application_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "com.virgilsecurity.email.plugin";
        $ticketUserIdType = VirgilUserIdType::application();
        $ticketJsonExpected = file_get_contents("data/json_user_id_application_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_id_fax_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserId = "+1 777 777 7777";
        $ticketUserIdType = VirgilUserIdType::fax();
        $ticketJsonExpected = file_get_contents("data/json_user_id_fax_ticket.json");

        $ticket = new VirgilUserIdTicket($ticketUserId, $ticketUserIdType);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_user_info_ticket_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $ticketUserFirstName = "Bob";
        $ticketUserLastName = "Body";
        $ticketUserAge = 21;
        $ticketJsonExpected = file_get_contents("data/json_user_info_ticket.json");

        $ticket = new VirgilUserInfoTicket($ticketUserFirstName, $ticketUserLastName, $ticketUserAge);
        $ticket->id()->setAccountId($accountId);
        $ticket->id()->setCertificateId($certificateId);
        $ticket->id()->setTicketId($ticketId);

        $marshaler = new VirgilJsonDataMarshaller();
        $ticketJson = $marshaler->marshal($ticket);

        $this->assertEquals($ticketJsonExpected, $ticketJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalTicket
     */
    public function test_user_id_email_ticket_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedTicketId = "TICKET-1234";
        $expectedTicketUserId = "user@domain.com";
        $ticketJson = file_get_contents("data/json_user_id_email_ticket.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $ticket = $marshaler->demarshalTicket($ticketJson);

        $this->assertEquals($expectedAccountId, $ticket->id()->accountId());
        $this->assertEquals($expectedCertificateId, $ticket->id()->certificateId());
        $this->assertEquals($expectedTicketId, $ticket->id()->ticketId());

        $this->assertTrue($ticket->isUserIdTicket());
        $userIdTicket = $ticket->asUserIdTicket();
        $this->assertTrue($userIdTicket->userIdType()->isEmail());
        $this->assertEquals($expectedTicketUserId, $userIdTicket->userId());
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalTicket
     */
    public function test_user_id_phone_ticket_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedTicketId = "TICKET-1234";
        $expectedTicketUserId = "+1 777 666 3333";
        $ticketJson = file_get_contents("data/json_user_id_phone_ticket.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $ticket = $marshaler->demarshalTicket($ticketJson);

        $this->assertEquals($expectedAccountId, $ticket->id()->accountId());
        $this->assertEquals($expectedCertificateId, $ticket->id()->certificateId());
        $this->assertEquals($expectedTicketId, $ticket->id()->ticketId());

        $this->assertTrue($ticket->isUserIdTicket());
        $userIdTicket = $ticket->asUserIdTicket();
        $this->assertTrue($userIdTicket->userIdType()->isPhone());
        $this->assertEquals($expectedTicketUserId, $userIdTicket->userId());
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalTicket
     */
    public function test_user_id_fax_ticket_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedTicketId = "TICKET-1234";
        $expectedTicketUserId = "+1 777 777 7777";
        $ticketJson = file_get_contents("data/json_user_id_fax_ticket.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $ticket = $marshaler->demarshalTicket($ticketJson);

        $this->assertEquals($expectedAccountId, $ticket->id()->accountId());
        $this->assertEquals($expectedCertificateId, $ticket->id()->certificateId());
        $this->assertEquals($expectedTicketId, $ticket->id()->ticketId());

        $this->assertTrue($ticket->isUserIdTicket());
        $userIdTicket = $ticket->asUserIdTicket();
        $this->assertTrue($userIdTicket->userIdType()->isFax());
        $this->assertEquals($expectedTicketUserId, $userIdTicket->userId());
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalTicket
     */
    public function test_user_info_ticket_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedTicketId = "TICKET-1234";
        $expectedTicketUserFirstName = "Bob";
        $expectedTicketUserLastName = "Body";
        $expectedTicketUserAge = 21;
        $ticketJson = file_get_contents("data/json_user_info_ticket.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $ticket = $marshaler->demarshalTicket($ticketJson);

        $this->assertEquals($expectedAccountId, $ticket->id()->accountId());
        $this->assertEquals($expectedCertificateId, $ticket->id()->certificateId());
        $this->assertEquals($expectedTicketId, $ticket->id()->ticketId());

        $this->assertTrue($ticket->isUserInfoTicket());
        $userInfoTicket = $ticket->asUserInfoTicket();
        $this->assertEquals($expectedTicketUserFirstName, $userInfoTicket->userFirstName());
        $this->assertEquals($expectedTicketUserLastName, $userInfoTicket->userLastName());
        $this->assertEquals($expectedTicketUserAge, $userInfoTicket->userAge());
    }

    /**
     * @covers VirgilJsonDataMarshaller::marshal
     */
    public function test_sign_marshalling() {
        $accountId = "USER-1234";
        $certificateId = "CERT-1234";
        $ticketId = "TICKET-1234";
        $signId = "SIGN-1234";
        $signHashName = "SHA512";
        $signSignedHash = "SIGNED-HASH";
        $signerCertificateId = "SIGNER-CERT-1234";

        $signJsonExpected = file_get_contents("data/json_sign.json");

        $sign = new VirgilSign($signHashName, $signSignedHash, $signerCertificateId);
        $sign->id()->setAccountId($accountId);
        $sign->id()->setCertificateId($certificateId);
        $sign->id()->setTicketId($ticketId);
        $sign->id()->setSignId($signId);

        $marshaler = new VirgilJsonDataMarshaller();
        $signJson = $marshaler->marshal($sign);

        $this->assertEquals($signJsonExpected, $signJson);
    }

    /**
     * @covers VirgilJsonDataMarshaller::demarshalCertificate
     */
    public function test_sign_demarshalling() {
        $expectedAccountId = "USER-1234";
        $expectedCertificateId = "CERT-1234";
        $expectedTicketId = "TICKET-1234";
        $expectedSignId = "SIGN-1234";
        $expectedSignHashName = "SHA512";
        $expectedSignSignedHash = "SIGNED-HASH";
        $expectedSignerCertificateId = "SIGNER-CERT-1234";

        $signJson = file_get_contents("data/json_sign.json");

        $marshaler = new VirgilJsonDataMarshaller();
        $sign = $marshaler->demarshalSign($signJson);

        $this->assertEquals($expectedAccountId, $sign->id()->accountId());
        $this->assertEquals($expectedCertificateId, $sign->id()->certificateId());
        $this->assertEquals($expectedTicketId, $sign->id()->ticketId());
        $this->assertEquals($expectedSignId, $sign->id()->signId());
        $this->assertEquals($expectedSignHashName, $sign->hashName());
        $this->assertEquals($expectedSignSignedHash, $sign->signedDigest());
        $this->assertEquals($expectedSignerCertificateId, $sign->signerCertificateId());
    }

}

?>
