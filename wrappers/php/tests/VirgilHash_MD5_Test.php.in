<?php
/**
 * Copyright (C) 2015 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

include_once "@PHP_MODULE_FILE_NAME@";

/**
 * @coversDefaultClass VirgilHash
 */
class VirgilHash_MD5_Test extends PHPUnit_Framework_TestCase {

    /**
     * @covers VirgilHash::md5
     */
    public function test_md5_object_creation() {
        $hash = VirgilHash::md5();

        $this->assertInstanceOf("VirgilHash", $hash);
        $this->assertEquals("MD5", $hash->name());

        return $hash;
    }

    /**
     * @covers VirgilHash::start
     * @covers VirgilHash::update
     * @covers VirgilHash::finish
     * @depends test_md5_object_creation
     */
    public function test_md5_update(VirgilHash $hash) {
        // Define hasing values
        $input1 = "Test ";
        $input2 = "md5 ";
        $input3 = "hashing";
        $baseHash = "d48f10a8bf87ae9bdf83213f79aaa4a4";
        // Hash
        $hash->start();
        $hash->update($input1);
        $hash->update($input2);
        $hash->update($input3);
        $inputHash = bin2hex($hash->finish());
        // Check
        $this->assertEquals($inputHash, $baseHash);
        // Finish
    }

    /**
     * @covers VirgilHash::hash
     * @depends test_md5_object_creation
     */
    public function test_md5_hash(VirgilHash $hash) {
        // Define hasing values
        $input = "Test md5 hashing";
        $baseHash = "d48f10a8bf87ae9bdf83213f79aaa4a4";
        // Hash
        $inputHash = bin2hex($hash->hash($input));
        // Check
        $this->assertEquals($inputHash, $baseHash);
    }

    /**
     * @covers VirgilHash::hmacStart
     * @covers VirgilHash::hmacUpdate
     * @covers VirgilHash::hmacFinish
     * @depends test_md5_object_creation
     */
    public function test_md5_hmac_update(VirgilHash $hash) {
        // Define hasing values
        $key = "HMAC key";
        $input1 = "Test ";
        $input2 = "md5 ";
        $input3 = "HMAC";
        $baseHash = "64d731faa111451ccacd76f0405670bb";
        // Hash
        $hash->hmacStart($key);
        $hash->hmacUpdate($input1);
        $hash->hmacUpdate($input2);
        $hash->hmacUpdate($input3);
        $inputHash = bin2hex($hash->hmacFinish());
        // Check
        $this->assertEquals($inputHash, $baseHash);
        // Finish
    }

    /**
     * @covers VirgilHash::hmac
     * @depends test_md5_object_creation
     */
    public function test_md5_hmac(VirgilHash $hash) {
        // Define hasing values
        $key = "HMAC key";
        $input = "Test md5 HMAC";
        $baseHash = "64d731faa111451ccacd76f0405670bb";
        // Hash
        $inputHash = bin2hex($hash->hmac($key, $input));
        // Check
        $this->assertEquals($inputHash, $baseHash);
    }

    /**
     * @covers VirgilHash::toAsn1
     * @covers VirgilHash::fromAsn1
     */
    public function test_md5_object_save_restore() {
        $testString = "This string will be hashed.";
        $hash = VirgilHash::md5();

        $hashAsn1 = $hash->toAsn1();

        $restoredHash = new VirgilHash();
        $restoredHash->fromAsn1($hashAsn1);

        $this->assertInstanceOf("VirgilHash", $hash);
        $this->assertEquals("MD5", $hash->name());

        $this->assertInstanceOf("VirgilHash", $restoredHash);
        $this->assertEquals("MD5", $restoredHash->name());

        $this->assertEquals($hash->hash($testString), $restoredHash->hash($testString));

        return $hash;
    }

}

?>
