<?php
/**
 * Copyright (C) 2015 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

include_once "@PHP_MODULE_FILE_NAME@";

/**
 * @coversDefaultClass VirgilSymmetricCipher
 */
class VirgilSymmetricCipher_AES256_CBC_Test extends PHPUnit_Framework_TestCase {

    /**
     * @covers VirgilSymmetricCipher::aes256
     */
    public function test_aes256_object_creation() {
        $cipher = VirgilSymmetricCipher::aes256();

        $this->assertInstanceOf("VirgilSymmetricCipher", $cipher);
        $this->assertEquals("AES-256-CBC", $cipher->name());

        return $cipher;
    }

    /**
     * @covers VirgilSymmetricCipher::setPadding
     * @covers VirgilSymmetricCipher::blockSize
     * @covers VirgilSymmetricCipher::ivSize
     * @covers VirgilSymmetricCipher::setIV
     * @covers VirgilSymmetricCipher::setEncryptionKey
     * @covers VirgilSymmetricCipher::reset
     * @covers VirgilSymmetricCipher::update
     * @covers VirgilSymmetricCipher::finish
     * @depends test_aes256_object_creation
     */
    public function test_aes256_encoding(VirgilSymmetricCipher $cipher) {
        // Define test values
        $key = "passphrase";
        $phrase = "This string will be encoded.";
        $baseEncodedPhrase = "8b99cff2a79e40aeed8c730f1e7904ce19401a1b7c68285d1fdc35daf5a5d2d8";
        // Set padding.
        $cipher->setPadding(VirgilSymmetricCipher::VirgilSymmetricCipherPadding_Zeros);
        // Check block size size for aes-256.
        $this->assertEquals(16, $cipher->blockSize());
        // Check IV size for aes-256.
        $this->assertEquals(16, $cipher->ivSize());
        // Set IV.
        $cipher->setIV($this->generateIV($cipher->ivSize()));
        // Check key size.
        $this->assertEquals(256, $cipher->keySize());
        // Set key for encoding.
        $keyHash = VirgilHash::sha256()->hash($key);
        $cipher->setEncryptionKey($keyHash);
        // Finish cipher configuration for encoding.
        $cipher->reset();
        // Encode test string
        $chunks = str_split($phrase, $cipher->blockSize());
        $encodedPhrase = "";
        foreach ($chunks as $chunk) {
            $encodedPhrase .= $cipher->update($chunk);
        }
        // Finish encoding.
        $encodedPhrase .= $cipher->finish();
        // Check result.
        $expectedOutputLength = ceil(strlen($phrase) / $cipher->blockSize()) * $cipher->blockSize();
        $this->assertEquals(strlen($encodedPhrase), $expectedOutputLength);
        $this->assertEquals(bin2hex($encodedPhrase), $baseEncodedPhrase);
    }

    /**
     * @covers VirgilSymmetricCipher::setPadding
     * @covers VirgilSymmetricCipher::blockSize
     * @covers VirgilSymmetricCipher::ivSize
     * @covers VirgilSymmetricCipher::setIV
     * @covers VirgilSymmetricCipher::setDecryptionKey
     * @covers VirgilSymmetricCipher::reset
     * @covers VirgilSymmetricCipher::update
     * @covers VirgilSymmetricCipher::finish
     * @depends test_aes256_object_creation
     */
    public function test_aes256_decoding(VirgilSymmetricCipher $cipher) {
        // Define test values
        $key = "passphrase";
        $encodedPhrase = pack("H*", "8b99cff2a79e40aeed8c730f1e7904ce19401a1b7c68285d1fdc35daf5a5d2d8");
        $baseDecodedPhrase = "This string will be encoded.";
        // Set padding.
        $cipher->setPadding(VirgilSymmetricCipher::VirgilSymmetricCipherPadding_Zeros);
        // Check IV size for aes-256.
        $this->assertEquals(16, $cipher->ivSize());
        // Set IV.
        $cipher->setIV($this->generateIV($cipher->ivSize()));
        // Check key size.
        $this->assertEquals(256, $cipher->keySize());
        // Set key for encoding.
        $keyHash = VirgilHash::sha256()->hash($key);
        $cipher->setDecryptionKey($keyHash);
        // Finish cipher configuration for decoding.
        $cipher->reset();
        // Encode test string
        $chunks = str_split($encodedPhrase, $cipher->blockSize());
        $decodedPhrase = "";
        foreach ($chunks as $chunk) {
            $decodedPhrase .= $cipher->update($chunk);
        }
        // Finish encoding.
        $decodedPhrase .= $cipher->finish();
        // Check result.
        $this->assertEquals($decodedPhrase, $baseDecodedPhrase);
    }

    /**
     * @covers VirgilSymmetricCipher::aes256
     * @covers VirgilSymmetricCipher::toAsn1
     * @covers VirgilSymmetricCipher::fromAsn1
     */
    public function test_aes256_object_save_restore() {
        $key = "passphrase";
        $keyHash = VirgilHash::sha256()->hash($key);
        $phrase = "This string will be encoded.";
        // Encrypt with initial cipher.
        // Create and configure cipher.
        $cipher = VirgilSymmetricCipher::aes256();
        $cipher->setIV($this->generateIV($cipher->ivSize()));
        // Set key for encoding.
        $cipher->setEncryptionKey($keyHash);
        // Finish cipher configuration for encoding.
        $cipher->reset();
        // Encode test string.
        $encodedPhrase = $cipher->update($phrase);
        // Finish encoding.
        $encodedPhrase .= $cipher->finish();
        // Save cipher to the ASN.1 structure
        $cipherAsn1 = $cipher->toAsn1();

        // Decrypt with restored cipher.
        // Restore cipher to the new instance.
        $restoredCipher = new VirgilSymmetricCipher();
        $restoredCipher->fromAsn1($cipherAsn1);
        // Check ciphers names to be equal.
        $this->assertEquals($cipher->name(), $restoredCipher->name());
        // Set key for decoding.
        $restoredCipher->setDecryptionKey($keyHash);
        // Finish restored cipher configuration for decoding.
        $restoredCipher->reset();
        // Decode test string
        $decodedPhrase = $restoredCipher->update($encodedPhrase);
        // Finish encoding.
        $decodedPhrase .= $restoredCipher->finish();

        // Compare initial phrase with decoded phrase.
        $this->assertEquals($phrase, $decodedPhrase);
    }

    private function generateIV($size) {
        $iv = "";
        for ($i = 0; $i < $size; ++$i) {
            $iv .= pack("C", 0x55);
        }
        return $iv;
    }
}

?>
