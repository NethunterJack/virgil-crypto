<?php
/**
 * Copyright (C) 2014 Virgil Security Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

include_once "@PHP_MODULE_FILE_NAME@";

/**
 * @covers VirgilCustomParams algorithms
 */
class VirgilCustomParams_Test extends PHPUnit_Framework_TestCase {

    /**
     * @covers VirgilCustomParams::toAsn1
     */
    public function test_custom_params_to_asn1() {
        // Create object with custom parameters
        $customParams = new VirgilCustomParams();
        $this->assertInstanceOf("VirgilCustomParams", $customParams);
        // Initialize test parameters
        $fileSizeKey = "fileSize";
        $fileSizeValue = 1234567890;

        $fileNameKey = "fileName";
        $fileNameValue = "Имя файла";
        $fileNameValueUTF8 =
                iconv(mb_detect_encoding($fileNameValue, mb_detect_order(), true), "UTF-8", $fileNameValue);

        $fileHashKey = "md5";
        $fileHashValue = pack("H*", "6F8DB599DE986FAB7A21625B7916589C");
        // Set parameters
        $customParams->setInteger($fileSizeKey, $fileSizeValue);
        $customParams->setString($fileNameKey, $fileNameValueUTF8);
        $customParams->setData($fileHashKey, $fileHashValue);
        // Marshal parameters to ASN.1 structure
        $customParamsAsn1 = $customParams->toAsn1();
        // Restore parameters to new object
        $restoredCustomParameters = new VirgilCustomParams();
        $restoredCustomParameters->fromAsn1($customParamsAsn1);
        // Check parameters in the new object
        $this->assertEquals($fileSizeValue, $restoredCustomParameters->getInteger($fileSizeKey));
        $this->assertEquals($fileNameValueUTF8, $restoredCustomParameters->getString($fileNameKey));
        $this->assertEquals($fileHashValue, $restoredCustomParameters->getData($fileHashKey));
    }

}

?>
