/**
 * Copyright (C) 2015-2018 Virgil Security Inc.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *
 *     (3) Neither the name of the copyright holder nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 */



// Module name
%module(directors="1") @SWIG_MODULE_NAME@

// Wrapper configuration section
#cmakedefine SWIG_WRAP_NAMESPACE
#cmakedefine SWIG_WRAP_COPY_CONSTRUCTOR

#cmakedefine01 VIRGIL_CRYPTO_FEATURE_LOW_LEVEL_WRAP
#cmakedefine01 VIRGIL_CRYPTO_FEATURE_PYTHIA

%insert ("begin") %{
#include <cstdlib>
%}

%insert ("header") %{
#include "VirgilConfig.h"
%}

// Standard includes
%include <exception.i>
%include <std_except.i>
%include <std_common.i>
%include <std_string.i>

// Custom includes
%include "common.i"
%include "util.i"

// Package std
%ignore std::to_string;

// Package: virgil::crypto
%ignore virgil::crypto::str2bytes;
%ignore virgil::crypto::bytes2str;
%ignore virgil::crypto::hex2bytes;
%ignore virgil::crypto::bytes2hex;
%ignore virgil::crypto::bytes_zeroize;
%ignore virgil::crypto::string_zeroize;
%ignore virgil::crypto::bytes_append;
%ignore virgil::crypto::bytes_split;
%ignore virgil::crypto::bytes_split_half;
%ignore virgil::crypto::bytes_split_chunks;
INCLUDE_CLASS(VirgilByteArray, virgil::crypto, virgil/crypto)

%ignore VIRGIL_VERSION;
%ignore VIRGIL_VERSION_MAJOR;
%ignore VIRGIL_VERSION_MINOR;
%ignore VIRGIL_VERSION_PATCH;
INCLUDE_CLASS(VirgilVersion, virgil::crypto, virgil/crypto)

%ignore virgil::crypto::VirgilDataSink::safeWrite;
INCLUDE_CLASS_WITH_DIRECTOR(VirgilDataSource, virgil::crypto, virgil/crypto)
INCLUDE_CLASS_WITH_DIRECTOR(VirgilDataSink, virgil::crypto, virgil/crypto)

// Package: virgil::crypto::foundation
%ignore *::VirgilHash(const char *);
%ignore *::VirgilKDF(char const *);
%ignore *::VirgilSymmetricCipher(char const *);
%ignore *::VirgilRandom(virgil::crypto::VirgilByteArray const &);

// Package: virgil::crypto::foundation::asn1
%ignore *::asn1Write;
%ignore *::asn1Read;
%ignore *::jsonWrite;
%ignore *::jsonRead;
INCLUDE_CLASS(VirgilAsn1Compatible, virgil::crypto::foundation::asn1, virgil/crypto/foundation/asn1)

// Package: virgil::crypto
// MUST be before VirgilAsymmetricCipher
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilKeyPair, virgil::crypto, virgil/crypto)
DEFINE_USING(VirgilKeyPair, virgil::crypto)

#if VIRGIL_CRYPTO_FEATURE_LOW_LEVEL_WRAP
    // Package: virgil::crypto::foundation::asn1
    INCLUDE_CLASS(VirgilAsn1Reader, virgil::crypto::foundation::asn1, virgil/crypto/foundation/asn1)
    INCLUDE_CLASS(VirgilAsn1Writer, virgil::crypto::foundation::asn1, virgil/crypto/foundation/asn1)

    // Package: virgil::crypto::foundation::cms
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSKeyTransRecipient, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSPasswordRecipient, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSEncryptedContent, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSEnvelopedData, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSContent, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)
    INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCMSContentInfo, virgil::crypto::foundation::cms, virgil/crypto/foundation/cms)

    // Package: virgil::crypto::foundation
    DEFINE_NAMESPACE(VirgilSymmetricCipherPadding, virgil::crypto::foundation)
    DEFINE_NAMESPACE(ECKeyGroup, virgil::crypto::foundation)

    INCLUDE_CLASS(VirgilHash, virgil::crypto::foundation, virgil/crypto/foundation)
    INCLUDE_CLASS(VirgilKDF, virgil::crypto::foundation, virgil/crypto/foundation)
    DEFINE_USING(VirgilKDF, virgil::crypto::foundation)
    INCLUDE_CLASS(VirgilSymmetricCipher, virgil::crypto::foundation, virgil/crypto/foundation)
    INCLUDE_CLASS(VirgilAsymmetricCipher, virgil::crypto::foundation, virgil/crypto/foundation)
    INCLUDE_CLASS(VirgilPBE, virgil::crypto::foundation, virgil/crypto/foundation)
    DEFINE_USING(VirgilPBE, virgil::crypto::foundation)
    INCLUDE_CLASS(VirgilHKDF, virgil::crypto::foundation, virgil/crypto/foundation)
#else
    INCLUDE_CLASS(VirgilHash, virgil::crypto::foundation, virgil/crypto/foundation)
    %ignore VirgilCMSKeyTransRecipient;
    %ignore VirgilCMSPasswordRecipient;
    %ignore VirgilCMSEncryptedContent;
    %ignore VirgilCMSEnvelopedData;
    %ignore VirgilCMSContent;
    %ignore VirgilAsn1Reader;
    %ignore VirgilAsn1Writer;
#endif /* VIRGIL_CRYPTO_FEATURE_LOW_LEVEL_WRAP */

// Package: virgil::crypto::foundation
INCLUDE_CLASS(VirgilBase64, virgil::crypto::foundation, virgil/crypto/foundation)
INCLUDE_CLASS(VirgilPBKDF, virgil::crypto::foundation, virgil/crypto/foundation)
INCLUDE_CLASS(VirgilRandom, virgil::crypto::foundation, virgil/crypto/foundation)

DEFINE_USING(VirgilHash, virgil::crypto::foundation)
DEFINE_USING(VirgilPBKDF, virgil::crypto::foundation)

// Package: virgil::crypto
DEFINE_NAMESPACE(VirgilConfig, virgil::crypto)
%include <@virgil_crypto_BINARY_DIR@/include/VirgilConfig.h>

INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilCustomParams, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilCipherBase, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilCipher, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilChunkCipher, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilSignerBase, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilSigner, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilStreamSigner, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilStreamCipher, virgil::crypto, virgil/crypto)
INCLUDE_CLASS(VirgilTinyCipher, virgil::crypto, virgil/crypto)
%ignore virgil::crypto::VirgilByteArrayUtils::zeroize;
%ignore virgil::crypto::VirgilByteArrayUtils::append;
%ignore virgil::crypto::VirgilByteArrayUtils::popBytes;
INCLUDE_CLASS(VirgilByteArrayUtils, virgil::crypto, virgil/crypto)

// Package: virgil::crypto::pfs
%ignore virgil::crypto::pfs::VirgilPFS::setRandom;
%ignore virgil::crypto::pfs::VirgilPFS::setHash;
%ignore virgil::crypto::pfs::VirgilPFS::setDH;
%ignore virgil::crypto::pfs::VirgilPFS::setKDF;
%ignore virgil::crypto::pfs::VirgilPFS::setCipher;

INCLUDE_CLASS(VirgilPFSEncryptedMessage, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSPublicKey, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSPrivateKey, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSInitiatorPublicInfo, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSInitiatorPrivateInfo, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSResponderPublicInfo, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSResponderPrivateInfo, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFSSession, virgil::crypto::pfs, virgil/crypto/pfs)
INCLUDE_CLASS(VirgilPFS, virgil::crypto::pfs, virgil/crypto/pfs)

// Package Pythia
#if VIRGIL_CRYPTO_FEATURE_PYTHIA

INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaBlindResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaContext, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaDeblindResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaGetPasswordUpdateTokenResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaProveResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaTransformResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaUpdateDeblindedWithTokenResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythiaVerifyResult, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_CLASS_WITH_COPY_CONSTRUCTOR(VirgilPythia, virgil::crypto::pythia, virgil/crypto/pythia)
INCLUDE_TYPE(virgil_pythia_c, virgil/crypto/pythia)

#endif // VIRGIL_CRYPTO_FEATURE_PYTHIA
