--- library/pkwrite.c	2014-07-11 12:28:56.000000000 +0300
+++ library/pkwrite.c	2014-10-02 11:03:54.000000000 +0300
@@ -34,6 +34,8 @@
 #include "polarssl/pk.h"
 #include "polarssl/asn1write.h"
 #include "polarssl/oid.h"
+#include "polarssl/entropy.h"
+#include "polarssl/ctr_drbg.h"

 #if defined(POLARSSL_RSA_C)
 #include "polarssl/rsa.h"
@@ -47,6 +49,9 @@
 #if defined(POLARSSL_PEM_WRITE_C)
 #include "polarssl/pem.h"
 #endif
+#if defined(POLARSSL_PKCS12_C)
+#include "polarssl/pkcs12.h"
+#endif

 #if defined(POLARSSL_PLATFORM_C)
 #include "polarssl/platform.h"
@@ -129,6 +134,57 @@
 }
 #endif /* POLARSSL_ECP_C */

+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+static int asn1_get_params( unsigned char **p, const unsigned char *end,
+                            asn1_buf *params )
+{
+    int ret = 0;
+
+    if( *p == end )
+    {
+        memset( params, 0, sizeof(asn1_buf) );
+        return( 0 );
+    }
+
+    params->tag = **p;
+    (*p)++;
+
+    if( ( ret = asn1_get_len( p, end, &params->len ) ) != 0 )
+        return( ret );
+
+    params->p = *p;
+    *p += params->len;
+
+    if( *p != end )
+        return( POLARSSL_ERR_ASN1_LENGTH_MISMATCH );
+
+    return( ret );
+}
+
+/*
+ *  pkcs-12PbeParams ::= SEQUENCE {
+ *    salt          OCTET STRING,
+ *    iterations    INTEGER
+ *  }
+ *
+ */
+static int pk_write_pkcs12_param( unsigned char **p, unsigned char * start,
+                                  size_t iterations,
+                                  const unsigned char *salt, size_t salt_len )
+{
+    int ret = 0;
+    size_t len = 0;
+
+    ASN1_CHK_ADD( len, asn1_write_int( p, start, (int)iterations ) );
+    ASN1_CHK_ADD( len, asn1_write_octet_string( p, start, salt, salt_len ) );
+    ASN1_CHK_ADD( len, asn1_write_len( p, start, len ) );
+    ASN1_CHK_ADD( len, asn1_write_tag( p, start, ASN1_CONSTRUCTED |
+                                                 ASN1_SEQUENCE ) );
+
+    return( (int) len );
+}
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
+
 int pk_write_pubkey( unsigned char **p, unsigned char *start,
                      const pk_context *key )
 {
@@ -199,7 +255,16 @@
 }

 int pk_write_key_der( pk_context *key, unsigned char *buf, size_t size )
+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
 {
+    return pk_write_key_enc_der( key, buf, size, NULL, 0 );
+}
+
+int pk_write_key_enc_der( pk_context *key, unsigned char *buf, size_t size,
+                          const unsigned char *pwd, size_t pwdlen )
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
+{
+
     int ret;
     unsigned char *c = buf + size;
     size_t len = 0;
@@ -259,12 +324,24 @@
         len += pub_len;

         /* parameters */
+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+        if( pwd == NULL || pwdlen == 0 )
+        {
+        /* added only if password is not specified,
+         *     when password is specified it will be added
+         *     as part of PKCS#8 structure
+         */
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
+
         ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf, ec ) );

         ASN1_CHK_ADD( par_len, asn1_write_len( &c, buf, par_len ) );
         ASN1_CHK_ADD( par_len, asn1_write_tag( &c, buf,
                             ASN1_CONTEXT_SPECIFIC | ASN1_CONSTRUCTED | 0 ) );
         len += par_len;
+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+        }
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */

         /* privateKey: write as MPI then fix tag */
         ASN1_CHK_ADD( len, asn1_write_mpi( &c, buf, &ec->d ) );
@@ -281,6 +358,180 @@
 #endif /* POLARSSL_ECP_C */
         return( POLARSSL_ERR_PK_FEATURE_UNAVAILABLE );

+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+
+    if( pwd != NULL && pwdlen > 0 && len > 0)
+    {
+        size_t oid_len = 0;
+        const char *oid;
+
+        size_t par_len = 0;
+
+        const cipher_type_t cipher_alg = POLARSSL_CIPHER_DES_EDE3_CBC;
+        const md_type_t md_alg = POLARSSL_MD_SHA1;
+
+        /*
+         * Write private key to the PrivatKeyInfo object (PKCS#8 v1.2 = RFC 5208)
+         *
+         *    PrivateKeyInfo ::= SEQUENCE {
+         *      version                   Version,
+         *      privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,
+         *      privateKey                PrivateKey,
+         *      attributes           [0]  IMPLICIT Attributes OPTIONAL }
+         *
+         *    Version ::= INTEGER
+         *    PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier
+         *    PrivateKey ::= OCTET STRING
+         *
+         *  The PrivateKey OCTET STRING is a SEC1 ECPrivateKey
+         */
+
+        /* privateKey: mark as octet string */
+        ASN1_CHK_ADD( len, asn1_write_len( &c, buf, len ) );
+        ASN1_CHK_ADD( len, asn1_write_tag( &c, buf, ASN1_OCTET_STRING ) );
+
+        /* privateKeyAlgorithm */
+        if( ( ret = oid_get_oid_by_pk_alg( pk_get_type( key ),
+                                           &oid, &oid_len ) ) != 0 )
+        {
+            return( ret );
+        }
+
+#if defined(POLARSSL_ECP_C)
+        if( pk_get_type( key ) == POLARSSL_PK_ECKEY )
+        {
+            ASN1_CHK_ADD( par_len, pk_write_ec_param( &c, buf,
+                                                      pk_ec( *key ) ) );
+        }
+#endif
+
+        ASN1_CHK_ADD( len, asn1_write_algorithm_identifier( &c, buf,
+                                                            oid, oid_len,
+                                                            par_len ) );
+
+        /* version */
+        ASN1_CHK_ADD( len, asn1_write_int( &c, buf, 0 ) );
+
+        ASN1_CHK_ADD( len, asn1_write_len( &c, buf, len ) );
+        ASN1_CHK_ADD( len, asn1_write_tag( &c, buf, ASN1_CONSTRUCTED |
+                                                    ASN1_SEQUENCE ) );
+
+        /*
+         * Encrypt private key and write it to the
+         *     EncryptedPrivatKeyInfo object (PKCS#8)
+         *
+         *  EncryptedPrivateKeyInfo ::= SEQUENCE {
+         *    encryptionAlgorithm  EncryptionAlgorithmIdentifier,
+         *    encryptedData        EncryptedData
+         *  }
+         *
+         *  EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
+         *
+         *  EncryptedData ::= OCTET STRING
+         *
+         *  The EncryptedData OCTET STRING is a PKCS#8 PrivateKeyInfo
+         */
+
+        /*
+         * Encrypt data with appropriate PDE
+         */
+        /* Generate salt */
+        ctr_drbg_context ctr_drbg;
+        entropy_context entropy;
+        const char *drbg_personal_info = "random_salt";
+        unsigned char pbe_salt[32] = {0x0};
+        const size_t pbe_salt_len = sizeof(pbe_salt);
+        const size_t pbe_iterations = 8192;
+
+        entropy_init( &entropy );
+        if( ( ret = ctr_drbg_init( &ctr_drbg, entropy_func, &entropy,
+                                  (const unsigned char *)drbg_personal_info,
+                                  strlen( drbg_personal_info ) ) ) != 0 )
+        {
+            entropy_free( &entropy );
+            return ( ret );
+        }
+
+        if( (ret = ctr_drbg_random( &ctr_drbg, pbe_salt,
+                                    sizeof(pbe_salt) ) ) != 0 )
+        {
+            ctr_drbg_free( &ctr_drbg );
+            entropy_free( &entropy );
+            return ( ret );
+        }
+
+        ctr_drbg_free( &ctr_drbg );
+        entropy_free( &entropy );
+
+        /* get pbe parameters */
+        asn1_buf pbe_params = {0x0, 0x0, 0x0};
+        unsigned char pbe_params_buf[128] = {0x0};
+        unsigned char *pbe_params_buf_c = pbe_params_buf +
+                                           sizeof(pbe_params_buf);
+        size_t pbe_params_len = 0;
+        unsigned char pbe_buf[2048] = {0x0};
+
+        /* get pbe */
+        ASN1_CHK_ADD( pbe_params_len, pk_write_pkcs12_param( &pbe_params_buf_c,
+                                                             pbe_params_buf,
+                                                             pbe_iterations,
+                                                             pbe_salt,
+                                                             pbe_salt_len) );
+
+        unsigned char * pbe_params_buf_parse_c = pbe_params_buf_c;
+        if( ( ret = asn1_get_params( &pbe_params_buf_parse_c,
+                                     pbe_params_buf_parse_c + pbe_params_len,
+                                     &pbe_params ) ) )
+        {
+            return ( ret );
+        }
+        if( ( ret = oid_get_oid_by_pkcs12_pbe_alg( cipher_alg, md_alg,
+                                                   &oid, &oid_len ) ) != 0 )
+        {
+            return ( ret );
+        }
+        if( ( ret = pkcs12_pbe( &pbe_params, PKCS12_PBE_ENCRYPT,
+                                cipher_alg, md_alg,
+                                pwd, pwdlen, c, len, pbe_buf ) ) != 0 )
+        {
+            return( ret );
+        }
+
+        /* find length of encrypted data */
+        memset( buf, 0, size );
+        size_t zeros_cnt = 0;
+        for( zeros_cnt = 0;
+                ( *( pbe_buf + sizeof (pbe_buf) - zeros_cnt - 1) == 0x00 ) &&
+                ( zeros_cnt < sizeof( pbe_buf ) ); ++zeros_cnt );
+        len = sizeof( pbe_buf ) - zeros_cnt;
+
+        /* copy encrypted data to the target buffer */
+        memset( buf, 0, size );
+        c = buf + size - len;
+        memcpy( c, pbe_buf, len );
+
+        /* encryptedData: mark as octet string */
+        ASN1_CHK_ADD( len, asn1_write_len( &c, buf, len ) );
+        ASN1_CHK_ADD( len, asn1_write_tag( &c, buf, ASN1_OCTET_STRING ) );
+
+        /* pbe params */
+        ASN1_CHK_ADD( len, asn1_write_raw_buffer( &c, buf, pbe_params_buf_c,
+                                                  pbe_params_len ) );
+
+        /* fix len */
+        len -= pbe_params_len;
+
+        /* encryptionAlgorithm */
+        ASN1_CHK_ADD( len, asn1_write_algorithm_identifier( &c, buf,
+                                                            oid, oid_len,
+                                                            pbe_params_len ) );
+
+        ASN1_CHK_ADD( len, asn1_write_len( &c, buf, len ) );
+        ASN1_CHK_ADD( len, asn1_write_tag( &c, buf, ASN1_CONSTRUCTED |
+                                                    ASN1_SEQUENCE ) );
+    }
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
+
     return( (int) len );
 }

@@ -293,6 +544,8 @@
 #define PEM_END_PRIVATE_KEY_RSA     "-----END RSA PRIVATE KEY-----\n"
 #define PEM_BEGIN_PRIVATE_KEY_EC    "-----BEGIN EC PRIVATE KEY-----\n"
 #define PEM_END_PRIVATE_KEY_EC      "-----END EC PRIVATE KEY-----\n"
+#define PEM_BEGIN_PRIVATE_KEY_ENC   "-----BEGIN ENCRYPTED PRIVATE KEY-----\n"
+#define PEM_END_PRIVATE_KEY_ENC     "-----END ENCRYPTED PRIVATE KEY-----\n"

 int pk_write_pubkey_pem( pk_context *key, unsigned char *buf, size_t size )
 {
@@ -317,15 +570,37 @@
 }

 int pk_write_key_pem( pk_context *key, unsigned char *buf, size_t size )
+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+{
+    return pk_write_key_enc_pem( key, buf, size, NULL, 0 );
+}
+
+int pk_write_key_enc_pem( pk_context *key, unsigned char *buf, size_t size,
+                          const unsigned char *pwd, size_t pwdlen )
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
 {
     int ret;
     unsigned char output_buf[4096];
     const char *begin, *end;
     size_t olen = 0;

+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+    if( ( ret = pk_write_key_enc_der( key, output_buf, sizeof(output_buf),
+                                      pwd, pwdlen ) ) < 0 )
+        return( ret );
+#else
     if( ( ret = pk_write_key_der( key, output_buf, sizeof(output_buf) ) ) < 0 )
         return( ret );
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */

+#if defined(POLARSSL_PK_WRITE_ENCRYPTED_KEY)
+    if (pwd != NULL && pwdlen > 0)
+    {
+        begin = PEM_BEGIN_PRIVATE_KEY_ENC;
+        end = PEM_END_PRIVATE_KEY_ENC;
+    }
+    else
+#endif /* POLARSSL_PK_WRITE_ENCRYPTED_KEY */
 #if defined(POLARSSL_RSA_C)
     if( pk_get_type( key ) == POLARSSL_PK_RSA )
     {
